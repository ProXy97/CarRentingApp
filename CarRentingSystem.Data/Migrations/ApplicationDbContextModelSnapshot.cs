// <auto-generated />
using System;
using CarRentingSystem.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRentingSystem.Web.Data.Migrations
{
    [DbContext(typeof(CarRentingDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRentingSystem.Data.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Emissions")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinAgeRequired")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PeopleCapacity")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProtectionPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProtectionPlanId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryType = "Luxury",
                            Description = "Performance. Efficiency. Design. This is Audi Innovation. Sophistication in every detail.",
                            Emissions = 120,
                            ImageUrl = "https://imgd.aeplcdn.com/370x208/n/cw/ec/39472/a6-exterior-right-front-three-quarter.jpeg?q=75",
                            IsAvailable = true,
                            Location = "Sofia",
                            Make = "Audi",
                            MinAgeRequired = 28,
                            Model = "A6",
                            PeopleCapacity = 5,
                            Power = 333,
                            PricePerDay = 199.99m,
                            Transmission = "Automatic",
                            Year = 2022
                        },
                        new
                        {
                            Id = 2,
                            CategoryType = "Luxury",
                            Description = "Performance. Efficiency. Design. This is Audi Innovation. Sophistication in every detail.",
                            Emissions = 80,
                            ImageUrl = "https://www.motortrend.com/uploads/sites/10/2020/12/2021-audi-a4-premium-sedan-angular-front.png",
                            IsAvailable = true,
                            Location = "Sofia",
                            Make = "Audi",
                            MinAgeRequired = 28,
                            Model = "A4",
                            PeopleCapacity = 5,
                            Power = 170,
                            PricePerDay = 179.99m,
                            Transmission = "Automatic",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            CategoryType = "Luxury",
                            Description = "The BMW 520d 2021 is a luxury sedan that combines elegance and performance. It features a powerful yet efficient diesel engine, delivering a smooth and dynamic driving experience. With its sleek design, advanced technology, and comfortable interior, it offers a perfect blend of style, comfort, and sophistication.",
                            Emissions = 80,
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTy8W7qHiL69C8N-v0y_3xIM1jwkrBpKrVuVw&usqp=CAU",
                            IsAvailable = true,
                            Location = "Plovdiv",
                            Make = "BMW",
                            MinAgeRequired = 28,
                            Model = "520d",
                            PeopleCapacity = 5,
                            Power = 170,
                            PricePerDay = 199.99m,
                            Transmission = "Automatic",
                            Year = 2021
                        },
                        new
                        {
                            Id = 4,
                            CategoryType = "Small",
                            Description = "Stylish and compact hatchback that offers a perfect balance of performance, efficiency, and modern features, making it a practical and enjoyable urban companion.",
                            Emissions = 30,
                            ImageUrl = "https://media.autoexpress.co.uk/image/private/s--X-WVjvBW--/f_auto,t_content-image-full-desktop@1/v1649084579/autoexpress/2022/04/Renault%20Clio%202022.jpg",
                            IsAvailable = true,
                            Location = "Plovdiv",
                            Make = "Renault",
                            MinAgeRequired = 22,
                            Model = "Clio",
                            PeopleCapacity = 4,
                            Power = 70,
                            PricePerDay = 49.99m,
                            Transmission = "Manual",
                            Year = 2022
                        },
                        new
                        {
                            Id = 5,
                            CategoryType = "Medium",
                            Description = "Reliable and spacious mid-size sedan, known for its comfortable ride, premium interior, advanced safety features, and fuel-efficient engine options, making it a versatile family car.",
                            Emissions = 65,
                            ImageUrl = "https://media.autoexpress.co.uk/image/private/s--X-WVjvBW--/f_auto,t_content-image-full-desktop@1/v1563183024/autoexpress/2019/02/01_7.jpg",
                            IsAvailable = true,
                            Location = "Bourgas",
                            Make = "Volkswagen",
                            MinAgeRequired = 22,
                            Model = "Passat",
                            PeopleCapacity = 5,
                            Power = 140,
                            PricePerDay = 89.99m,
                            Transmission = "Automatic",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("CarRentingSystem.Data.Models.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxWeightCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ProtectionPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProtectionPlanId");

                    b.ToTable("Cargos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Van",
                            Description = "The award-winning van that continues to lead the way for large vans - the Sprinter Panel Van boasts the highest standard specification of any large van. Take your business to the next level.",
                            ImagePath = "/img/Cargos/Mercedes Cargo.png",
                            IsAvailable = true,
                            Make = "Mercedes",
                            MaxWeightCapacity = 3750,
                            Model = "Sprinter"
                        });
                });

            modelBuilder.Entity("CarRentingSystem.Data.Models.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProtectionPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProtectionPlanId");

                    b.ToTable("Extras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "For a specific request to go abroad, you may be asked for additional information and certain restrictions may be imposed.",
                            Discount = 0.0,
                            Name = "Driving abroad",
                            PricePerDay = 60m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Enjoy your stay in Bulgaria with high quality internet everywhere in the country.",
                            Discount = 0.0,
                            Name = "Mobile WiFi HOTSPOT",
                            PricePerDay = 6m
                        },
                        new
                        {
                            Id = 3,
                            Discount = 0.0,
                            Name = "Tension belt",
                            PricePerDay = 1m
                        },
                        new
                        {
                            Id = 4,
                            Description = "One time fee for purchase of Anti-skid show chains. They remain for the client after rental.",
                            Discount = 0.0,
                            Name = "Anti-skid snow chains",
                            PricePerDay = 30m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Limits your financial liability in the event of collision-related damage to the vehicle",
                            Discount = 0.0,
                            Name = "Collision Damage Waiver (CDW)",
                            PricePerDay = 0m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Limits your financial liability in the event of theft or attempted theft of the vehicle",
                            Discount = 0.0,
                            Name = "Theft Waiver (THW)",
                            PricePerDay = 0m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Reduces your financial liability for damage to windscreen, glass, lights and tyres up to your excess.",
                            Discount = 0.0,
                            Name = "Value Cover. Glass, Lights and Tyres Protection",
                            PricePerDay = 4.54m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Provides indemnity for driver and passengers in case of death or injury and covers medical expenses.",
                            Discount = 0.0,
                            Name = "Personal Accident Protection",
                            PricePerDay = 4.54m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Provides indemnity for your personal belongings in case of destruction or theft.",
                            Discount = 0.0,
                            Name = "Personal belongings protection",
                            PricePerDay = 4.54m
                        });
                });

            modelBuilder.Entity("CarRentingSystem.Data.Models.ProtectionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProtectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProtectionPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic Plan",
                            PricePerDay = 0.00m,
                            ProtectionType = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Medium Plan",
                            PricePerDay = 8.58m,
                            ProtectionType = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Premium Plan",
                            PricePerDay = 12.88m,
                            ProtectionType = "Premium"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRentingSystem.Data.Models.Car", b =>
                {
                    b.HasOne("CarRentingSystem.Data.Models.ProtectionPlan", "ProtectionPlan")
                        .WithMany("Cars")
                        .HasForeignKey("ProtectionPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProtectionPlan");
                });

            modelBuilder.Entity("CarRentingSystem.Data.Models.Cargo", b =>
                {
                    b.HasOne("CarRentingSystem.Data.Models.ProtectionPlan", "ProtectionPlan")
                        .WithMany("Cargos")
                        .HasForeignKey("ProtectionPlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProtectionPlan");
                });

            modelBuilder.Entity("CarRentingSystem.Data.Models.Extra", b =>
                {
                    b.HasOne("CarRentingSystem.Data.Models.ProtectionPlan", null)
                        .WithMany("Extras")
                        .HasForeignKey("ProtectionPlanId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRentingSystem.Data.Models.ProtectionPlan", b =>
                {
                    b.Navigation("Cargos");

                    b.Navigation("Cars");

                    b.Navigation("Extras");
                });
#pragma warning restore 612, 618
        }
    }
}
